(()=>{"use strict";const e=JSON.parse(localStorage.getItem("projects")),t=JSON.parse(localStorage.getItem("tasks")),a=e||[],n=t||[],c=class{static loadAllTask(){document.querySelector("#tab-title").textContent="All Tasks";const e=document.querySelector("#content");e.innerHTML="";const t=document.createElement("div");t.id="task-list",e.appendChild(t),i.loadAllTasks(t)}};class l{constructor(e,t,a,n,c,l){this.title=e,this.description=t,this.dueDate=a,this.priority=n,this.project=c,this.checked=l}}class o{static generateForm(e){document.querySelector("#content").innerHTML='\n        <div id="add-tasks-inputs-container" style="display: flex;">\n            <label for="task-title">Title: </label>\n            <input type="text" id="task-title" maxlength="40">\n            <label for="task-description">Description(Optional): </label>\n            <textarea id="task-description" maxlength="200"></textarea>\n            <label for="task-date">Date: </label>\n            <input type="date" id="task-date" max="9999-12-31">\n            <div id="priority-title">Priority: </div>\n            <div id="priority-button-container">\n                <button id="low-priority-btn">Low</button>\n                <button id="med-priority-btn">Med</button>\n                <button id="high-priority-btn">High</button>\n             </div>\n            <div id="add-cancel-task-container">\n            <button id="add-task-confirm-button">Add</button>\n            <button id="cancel-task-confirm-button">Cancel</button>\n            </div>\n        </div>\n        ';const t=document.querySelector("#task-title"),a=document.querySelector("#task-description"),c=document.querySelector("#task-date"),o=document.querySelector("#low-priority-btn"),i=document.querySelector("#med-priority-btn"),s=document.querySelector("#high-priority-btn"),d=document.querySelector("#add-task-confirm-button"),u=document.querySelector("#cancel-task-confirm-button");let m="";o.addEventListener("click",(()=>{o.className="selectedPrio",i.className="",s.className="",m="Low"})),i.addEventListener("click",(()=>{o.className="",i.className="selectedPrio",s.className="",m="Med"})),s.addEventListener("click",(()=>{o.className="",i.className="",s.className="selectedPrio",m="High"})),u.addEventListener("click",(()=>{r.viewProjectPage(e)})),d.addEventListener("click",(()=>{if(""!=t.value.trim()&&""!=c.value&&""!=m){const o=new l(t.value,a.value,c.value,m,e,!1);n.push(o),localStorage.setItem("tasks",JSON.stringify(n)),r.viewProjectPage(e)}else alert("Please fill all information")}))}}class i{static loadTaskForProject(e,t){n.forEach((a=>{a.project==e&&i.loadTaskGeneral(a,t,!1)}))}static loadAllTasks(e){n.forEach((t=>{i.loadTaskGeneral(t,e,!0)}))}static loadTaskGeneral(e,t,a){const l=document.createElement("div");l.className="task-card";const o=document.createElement("div");o.className="card-check-box",o.addEventListener("click",(()=>{0==e.checked?(e.checked=!0,o.classList.toggle("checked"),l.classList.toggle("checked"),localStorage.setItem("tasks",JSON.stringify(n))):(e.checked=!1,o.classList.toggle("checked"),l.classList.toggle("checked"),localStorage.setItem("tasks",JSON.stringify(n)))})),1==e.checked&&(o.classList.add("checked"),l.classList.add("checked"));const i=document.createElement("div");i.className="card-title",i.textContent=e.title;const d=document.createElement("button");d.className="card-details-button",d.textContent="details",d.addEventListener("click",(()=>{s.editTask(e.project,e,a)}));const u=document.createElement("div");u.className="card-date",u.textContent=e.dueDate;const m=document.createElement("div");m.className="card-prio",m.textContent=e.priority;const p=document.createElement("div");p.className="card-delete",p.textContent="X",p.addEventListener("click",(()=>{let t=e.project;const l=n.indexOf(e);n.splice(l,1),localStorage.setItem("tasks",JSON.stringify(n)),a?c.loadAllTask():r.viewProjectPage(t)})),l.appendChild(o),l.appendChild(i),l.appendChild(d),l.appendChild(u),l.appendChild(m),l.appendChild(p),t.appendChild(l)}}class s{static editTask(e,t,a){console.log(t.title),document.querySelector("#content").innerHTML=`\n        <div id="add-tasks-inputs-container" style="display: flex;">\n            <label for="task-title">Title: </label>\n            <input type="text" id="task-title" value="${t.title}" maxlength="40">\n            <label for="task-description">Description(Optional): </label>\n            <textarea id="task-description" maxlength="200">${t.description}</textarea>\n            <label for="task-date">Date: </label>\n            <input type="date" id="task-date" value="${t.dueDate}" max="9999-12-31">\n            <div id="priority-title">Priority: </div>\n            <div id="priority-button-container">\n                <button id="low-priority-btn">Low</button>\n                <button id="med-priority-btn">Med</button>\n                <button id="high-priority-btn">High</button>\n             </div>\n            <div id="add-cancel-task-container">\n            <button id="add-task-confirm-button">Add</button>\n            <button id="cancel-task-confirm-button">Cancel</button>\n            </div>\n        </div>\n        `;const l=document.querySelector("#task-title"),o=document.querySelector("#task-description"),i=document.querySelector("#task-date"),s=document.querySelector("#low-priority-btn"),d=document.querySelector("#med-priority-btn"),u=document.querySelector("#high-priority-btn"),m=document.querySelector("#add-task-confirm-button"),p=document.querySelector("#cancel-task-confirm-button");let k=t.priority;"Low"==k?s.className="selectedPrio":"Med"==k?d.className="selectedPrio":"High"==k&&(u.className="selectedPrio"),s.addEventListener("click",(()=>{s.className="selectedPrio",d.className="",u.className="",k="Low"})),d.addEventListener("click",(()=>{s.className="",d.className="selectedPrio",u.className="",k="Med"})),u.addEventListener("click",(()=>{s.className="",d.className="",u.className="selectedPrio",k="High"})),p.addEventListener("click",(()=>{a?c.loadAllTask():r.viewProjectPage(e)})),m.addEventListener("click",(()=>{""!=l.value.trim()&&""!=o.value.trim()&&""!=i.value&&""!=k?(t.title=l.value,t.description=o.value,t.dueDate=i.value,t.priority=k,console.log(n),localStorage.setItem("tasks",JSON.stringify(n)),a?c.loadAllTask():r.viewProjectPage(e)):(console.log(l.value.trim(),o.value.trim(),i.value,k),alert("Please fill all information"))}))}}class d{static addProjectUi(){const e=document.querySelector("#add-project-input-container"),t=document.querySelector("#add-projects-button");d.addProjectBtn(t,e),d.confirmBtn(t,e),d.cancelBtn(t,e)}static addProjectBtn(e,t){e.addEventListener("click",(()=>{e.style.display="none",t.style.display="grid",console.log(a)}))}static confirmBtn(e,t){document.querySelector("#add-button").addEventListener("click",(()=>{const n=document.querySelector("#add-project-input");a.includes(n.value)?alert(`${n.value} already exist`):""==n.value.trim()?alert("enter a value please"):(a.push(n.value),localStorage.setItem("projects",JSON.stringify(a)),d.generateProjects(),n.value="",t.style.display="none",e.style.display="block")}))}static cancelBtn(e,t){document.querySelector("#cancel-button").addEventListener("click",(()=>{document.querySelector("#add-project-input").value="",t.style.display="none",e.style.display="block"}))}static generateProjects(){const e=document.querySelector("#project-list");e.innerHTML="",a.forEach((t=>{const a=document.createElement("div");a.className="project-container";const n=document.createElement("button");n.className="project",n.textContent=t;const l=document.createElement("button");l.className="delete-project-button",l.textContent="X",l.addEventListener("click",(()=>{d.deleteProject(t),c.loadAllTask()})),n.addEventListener("click",(()=>{d.viewProjectPage(t)})),a.appendChild(n),a.appendChild(l),e.appendChild(a)}))}static deleteProject(e){const t=a.indexOf(e);a.splice(t,1),n.forEach((t=>{if(t.project==e){const e=n.indexOf(t);n.splice(e,1)}})),localStorage.setItem("tasks",JSON.stringify(n)),localStorage.setItem("projects",JSON.stringify(a)),d.generateProjects()}static viewProjectPage(e){document.querySelector("#tab-title").textContent=e;const t=document.querySelector("#content");t.innerHTML="";const a=document.createElement("button");a.id="add-task-button",a.textContent="+ Add Task",a.addEventListener("click",(()=>{o.generateForm(e)}));const n=document.createElement("div");n.id="task-list",t.appendChild(a),t.appendChild(n),i.loadTaskForProject(e,n)}}const r=d;document.addEventListener("DOMContentLoaded",class{static activateInterface(){r.addProjectUi(),document.querySelector("#all-tasks-tab").addEventListener("click",(()=>{c.loadAllTask()})),c.loadAllTask(),r.generateProjects()}}.activateInterface())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,